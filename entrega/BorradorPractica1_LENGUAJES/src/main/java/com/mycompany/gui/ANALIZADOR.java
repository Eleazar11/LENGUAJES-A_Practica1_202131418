/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.gui;

import com.mycompany.app.DisplayTokenGrid;
import com.mycompany.lexer.Lexer;
import com.mycompany.lexer.Token;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Eleazr
 */
public class ANALIZADOR extends javax.swing.JFrame {

    private List<Token> tokens; // Para almacenar los tokens y pintarlos

    /**
     * Creates new form ANALIZADOR
     */
    public ANALIZADOR() {
        initComponents();
        String code = "";
        this.setSize(750, 540);
        this.setLocationRelativeTo(null);
        this.setTitle("Practica 1 LENGUAJES");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        paraImagen = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButtonGuardarImagenActionPerformed = new javax.swing.JButton();
        jButtonGenerarReporteActionPerformed1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        paraImagen.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout paraImagenLayout = new javax.swing.GroupLayout(paraImagen);
        paraImagen.setLayout(paraImagenLayout);
        paraImagenLayout.setHorizontalGroup(
            paraImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );
        paraImagenLayout.setVerticalGroup(
            paraImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        jButton1.setText("REALIZAR ANÁLISIS LÉXICO\n");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("CARGAR ARCHIVO\n");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButtonGuardarImagenActionPerformed.setText("GUARDAR IMAGEN\n\n");
        jButtonGuardarImagenActionPerformed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarImagenActionPerformedActionPerformed(evt);
            }
        });

        jButtonGenerarReporteActionPerformed1.setText("REPORTES\n\n");
        jButtonGenerarReporteActionPerformed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerarReporteActionPerformed1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonGenerarReporteActionPerformed1)
                                .addGap(37, 37, 37)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(paraImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jButtonGuardarImagenActionPerformed)))))
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButtonGenerarReporteActionPerformed1)
                    .addComponent(jButtonGuardarImagenActionPerformed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paraImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String code = jTextArea1.getText();
        // Crear instancia del analizador léxico
        Lexer lexer = new Lexer(code);

        // Obtener la lista de tokens
        tokens = lexer.tokenize();

        // Mostrar la cuadrícula de tokens en el panel existente
        DisplayTokenGrid display = new DisplayTokenGrid(tokens, paraImagen);
        display.showGrid();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Crear un JFileChooser
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Text Files", "txt"));

        // Mostrar el diálogo de apertura de archivo
        int returnValue = fileChooser.showOpenDialog(this);

        // Si el usuario selecciona un archivo
        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File selectedFile = fileChooser.getSelectedFile();
            try {
                // Leer el archivo y cargar el contenido en el JTextArea
                java.nio.file.Path path = selectedFile.toPath();
                String content = new String(java.nio.file.Files.readAllBytes(path));
                jTextArea1.setText(content);
            } catch (java.io.IOException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "Error al leer el archivo", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButtonGuardarImagenActionPerformedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarImagenActionPerformedActionPerformed
        // Crear un BufferedImage con el tamaño del JPanel
    BufferedImage image = new BufferedImage(paraImagen.getWidth(), paraImagen.getHeight(), BufferedImage.TYPE_INT_RGB);
    Graphics2D g2d = image.createGraphics();
    paraImagen.paint(g2d);  // Pinta el contenido del JPanel en el BufferedImage
    g2d.dispose();

    // Usar un JFileChooser para que el usuario elija dónde guardar la imagen
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar Imagen");
    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("PNG Image", "png"));
    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("JPEG Image", "jpg"));
    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();
        String filePath = fileToSave.getAbsolutePath();

        // Agregar la extensión si el usuario no la proporciona
        if (!filePath.endsWith(".png") && !filePath.endsWith(".jpg")) {
            filePath += ".png"; // Puedes cambiar a ".jpg" si quieres guardar en ese formato
        }

        try {
            // Guardar la imagen en el archivo seleccionado
            ImageIO.write(image, filePath.endsWith(".png") ? "png" : "jpg", new File(filePath));
            JOptionPane.showMessageDialog(this, "Imagen guardada con éxito: " + filePath);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al guardar la imagen: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_jButtonGuardarImagenActionPerformedActionPerformed

    private void jButtonGenerarReporteActionPerformed1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerarReporteActionPerformed1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonGenerarReporteActionPerformed1ActionPerformed

    /**
     * @param args the command line arguments
     */
    // Método para dibujar el texto en el panel si es necesario
    private void paintTextInPanel(String text) {
        paraImagen.removeAll(); // Limpiar el panel antes de pintar
        paraImagen.repaint();

        // Crear un componente que dibuja el texto
        JPanel textPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.BLACK); // Color del texto
                g.drawString(text, 10, 20); // Dibuja el texto en el panel
            }
        };

        // Ajustar el tamaño del panel de texto para que coincida con el tamaño del JPanel
        textPanel.setPreferredSize(new Dimension(379, 378));

        paraImagen.add(textPanel);
        paraImagen.revalidate(); // Revalidar para actualizar la vista
    }

    
    public String generarReporteTokens(List<Token> tokens) {
    StringBuilder reporte = new StringBuilder();
    reporte.append("Reporte de Tokens:\n");
    reporte.append("=====================================\n");
    for (Token token : tokens) {
        reporte.append("Token: ").append(token.getLexema()).append("\n");
        reporte.append("Tipo: ").append(token.getTipo()).append("\n");
        reporte.append("Línea: ").append(token.getLinea()).append("\n");
        reporte.append("Columna: ").append(token.getColumna()).append("\n");
        reporte.append("=====================================\n");
    }
    return reporte.toString();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGenerarReporteActionPerformed1;
    private javax.swing.JButton jButtonGuardarImagenActionPerformed;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel paraImagen;
    // End of variables declaration//GEN-END:variables
}
